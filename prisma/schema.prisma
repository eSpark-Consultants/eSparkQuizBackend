// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int             @id @default(autoincrement())
  email         String?         @unique
  firstName     String?
  lastName      String?
  userName      String?
  avatar        String?
  dob           DateTime?
  phoneNumber   String?
  country       String?
  city          String?
  role          ROLES           @default(USER)
  password      String          @default("")
  resetToken    String          @default("")
  status        Boolean         @default(true)
  isVerified    Boolean         @default(true)
  fcmToken      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  FavoriteItems FavoriteItems[]
  Order         Order[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  Item      Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id            Int             @id @default(autoincrement())
  name          String
  image         String
  price         Int
  categoryId    Int
  Category      Category        @relation(fields: [categoryId], references: [id])
  OrderItems    OrderItems[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  FavoriteItems FavoriteItems[]
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  itemId    Int
  Item      Item     @relation(fields: [itemId], references: [id])
  orderId   Int
  Order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int
  amount    Float
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              Int          @id @default(autoincrement())
  totalAmount     Float
  OrderItems           OrderItems[]
  userId          Int
  paidAmount      Int          @default(0)
  remainingAmount Int          @default(0)
  User            User         @relation(fields: [userId], references: [id])
  status          ORDER_STATUS @default(UNPAID)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model FavoriteItems {
  id        Int      @id @default(autoincrement())
  itemId    Int
  Item      Item     @relation(fields: [itemId], references: [id])
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ROLES {
  USER
  RIDER
  ADMIN
}

enum ORDER_STATUS {
  PAID
  UNPAID
}
